apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: check-serviceaccount-all_access-clusterrole
  annotations:
    policies.kyverno.io/title: Check for ServiceAccounts with non compliant Roles/ClusterRoles having all action allowed
    policies.kyverno.io/category: RBAC
    policies.kyverno.io/severity: critical
    policies.kyverno.io/minversion: 1.12.0
    kyverno.io/kyverno-version: 1.12.0
    kyverno.io/kubernetes-version: "1.28"
    policies.kyverno.io/subject: ClusterRoleBinding
    policies.kyverno.io/description: >-
      This policy will check for all the service accounts which are mapped with the wildcard verb and apiGroup for given resources 
      (secrets, pods, deployments, daemonsets, replicationcontrollers, replicasets, jobs, cronjobs, roles, clusterrolebindings, users, groups )
spec:
  validationFailureAction: Audit
  background: true
  rules:
    - name: check-wildcard-verbs-apigroups-in-clusterroles
      match:
        any:
        - resources:
            kinds:
            - ClusterRoleBinding
      context:
        - name: role
          apiCall:
            urlPath: "/apis/rbac.authorization.k8s.io/v1/clusterroles/{{ request.object.roleRef.name }}"
      validate:
        message: >- 
           ClusterRoleBinding {{ request.object.metadata.name }} with subjects {{ request.object.subjects[].name }}
           is using role {{role.metadata.name}}
        deny:
          conditions:
            any:
              - key: "{{ contains(role.rules[].verbs[], '*') && (contains(role.rules[].resources[], 'secrets') || contains(role.rules[].resources[], 'pods') || contains(role.rules[].resources[], 'deployments') || contains(role.rules[].resources[], 'daemonsets') || contains(role.rules[].resources[], 'statefulsets') || contains(role.rules[].resources[], 'replicationcontrollers') || contains(role.rules[].resources[], 'replicasets') || contains(role.rules[].resources[], 'cronjobs') || contains(role.rules[].resources[], 'jobs') || contains(role.rules[].resources[], 'roles') || contains(role.rules[].resources[], 'clusterroles') || contains(role.rules[].resources[], 'rolebindings') || contains(role.rules[].resources[], 'clusterrolebindings') || contains(role.rules[].resources[], 'users') || contains(role.rules[].resources[], 'groups')) && contains(role.rules[].apiGroups[], '*') }}"
                operator: Equals
                value: true
