---
# ClusterCleanupPolicy for unused PVCs
apiVersion: kyverno.io/v2beta1
kind: ClusterCleanupPolicy
metadata:
  name: cleanup-unused-pvcs
  annotations:
    policies.kyverno.io/title: Cleanup Unused PVCs
    policies.kyverno.io/category: Storage
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: PersistentVolumeClaim
    policies.kyverno.io/description: >-
      This policy removes PersistentVolumeClaims that are not referenced by any Pod
      or StatefulSet. It checks for PVCs that have been unused for a configurable
      grace period to avoid removing recently created resources.
spec:
  # Schedule cleanup to run every hour
  schedule: "0 * * * *"
  
  # Conditions for PVC cleanup
  conditions:
    all:
    - key: "{{ request.object.kind }}"
      operator: Equals
      value: PersistentVolumeClaim
    - key: "{{ request.object.status.phase }}"
      operator: AnyIn
      value: ["Bound", "Available"]
    # Exclude PVCs with specific annotations to prevent cleanup
    - key: "{{ request.object.metadata.annotations.\"kyverno.io/skip-cleanup\" || 'false' }}"
      operator: NotEquals
      value: "true"
    # Only cleanup PVCs older than 1 hour to avoid race conditions
    - key: "{{ time_since('', request.object.metadata.creationTimestamp, '') }}"
      operator: GreaterThan
      value: "1h"

  # Exclude system namespaces and critical PVCs
  exclude:
    any:
    - resources:
        namespaces:
        - kube-system
        - kube-public
        - kube-node-lease
        - kyverno
        - cert-manager
        - ingress-nginx
    - resources:
        names:
        - "*-master-*"    # Common StatefulSet PVC pattern
        - "*-data-*"      # Common data PVC pattern
        selector:
          matchLabels:
            app.kubernetes.io/component: database

  # Define what constitutes an unused PVC
  match:
  - any:
    - resources:
        kinds:
        - PersistentVolumeClaim
        operations:
        - CREATE
        - UPDATE

  # Context to check for PVC usage
  context:
  - name: pods_using_pvc
    apiCall:
      urlPath: "/api/v1/namespaces/{{ request.object.metadata.namespace }}/pods"
      jmesPath: "items[?spec.volumes[?persistentVolumeClaim.claimName == '{{ request.object.metadata.name }}']] | length(@)"
  
  - name: statefulsets_using_pvc
    apiCall:
      urlPath: "/apis/apps/v1/namespaces/{{ request.object.metadata.namespace }}/statefulsets"
      jmesPath: "items[?spec.volumeClaimTemplates[?metadata.name == '{{ request.object.metadata.name }}']] | length(@)"

  # Only cleanup if PVC is truly unused
  validate:
    message: "PVC {{ request.object.metadata.name }} is unused and will be cleaned up"
    deny:
      conditions:
        any:
        - key: "{{ pods_using_pvc }}"
          operator: GreaterThan
          value: 0
        - key: "{{ statefulsets_using_pvc }}"
          operator: GreaterThan
          value: 0
